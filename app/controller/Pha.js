/*
 * File: app/controller/Pha.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('HUDTenant.controller.Pha', {
    extend: 'Ext.app.Controller',

    config: {
        models: [
            'Pha'
        ],
        stores: [
            'PhaStore',
            'StateStore'
        ],
        views: [
            'PhasView'
        ],

        control: {
            "phasview #searchField": {
                keyup: 'search'
            },
            "searchfield": {
                clearicontap: 'clearSearch'
            },
            "phasview #stateField": {
                change: 'filterByState'
            }
        }
    },

    search: function(textfield, e, eOpts) {
        this.filterBy();
    },

    clearSearch: function(textfield, e, eOpts) {

        this.filterBy();
    },

    filterByState: function(selectfield, newValue, oldValue, eOpts) {
        this.filterBy();
    },

    filterByValues: function(state, searchValue) {
        var me = this,
            store = Ext.getStore('PhaStore'),	// Pha store
            view = Ext.getCmp('phasview'),
            list = view.down('list'),
            restoreGroup = function(){
                me.restoreGroup(list, store);
            };


        me.mask('searching and filtering');

        list.setStore(null);

        store.clearFilter();
        // Clear current filter if less than 2
        if (state !== 'All') {
           store.filter('state',state);
        }

            // Search term must be at least 2 characters
        if (searchValue.length < 2) {
           //don't filter by searchValue

        }
        else if (searchValue) {  // Check if a value is provided

            // Spit value to get multiple terms
            var terms = searchValue.split(' ');

            // Convert each search string into regex
            var regexps = [];
            Ext.each(terms, function(term) {

                // Ensure term is not space and at least 2 characters
                if (term && term.length > 1) {
                    regexps.push(new RegExp(term, 'i')); // Case-insensitive regex
                }

            });

            // Filter records
            store.filter(function(record) {

                var matches = [];

                // Check each of the regular expressions
                Ext.each(regexps, function(regex) {

                    var match;
                    if (state === "All"){
                        match = record.get('name').match(regex);
                    }
                    else{
                        match = record.get('name').match(regex) && (record.get('state') === state);
                    }
                    matches.push(match);

                });

                // If nothing was found, return false to not show
                if (regexps.length > 1 && matches.indexOf(false) != -1) {
                    return false;
                } else {
                    // Else return to show
                    return matches[0];
                }

            });

        }
        store.load({
            callback: restoreGroup
        });
    },

    filterBy : function(){
      var view = Ext.getCmp('phasview'),
          stateField = view.down('selectfield'),
          state = stateField.getValue(),
          searchField = view.down('searchfield'),
          searchValue = searchField.getValue();

        this.filterByValues(state, searchValue);
    },

    mask: function(msg) {
        Ext.Viewport.setMasked({
            xtype: 'loadmask',
            message: msg
        });
    },

    restoreGroup: function(list, store) {
        list.setStore(store);

        Ext.Viewport.setMasked(false);
    }

});