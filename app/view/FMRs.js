/*
 * File: app/view/FMRs.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('HUDTenant.view.FMRs', {
    extend: 'Ext.Panel',
    alias: 'widget.fmrsview',

    requires: [
        'Ext.Panel',
        'Ext.field.Select',
        'Ext.dataview.List',
        'Ext.XTemplate'
    ],

    config: {
        id: 'fmrs',
        itemId: 'fmrs-view',

        layout: 'vbox',
        items: [
            {
                xtype: 'titlebar',
                docked: 'top',
                title: 'Fair Market Rents',
                items: [
                    {
                        xtype: 'button',
                        itemId: 'fmrsback',
                        ui: 'back',
                        text: 'Back',
                        handler: function(button, e, eOpts) {
                            Ext.Viewport.setActiveItem(Ext.getCmp('main-view'));
                        }
                    }
                ]
            },
            {
                xtype: 'panel',
                items: [
                    {
                        xtype: 'selectfield',
                        itemId: 'myselectfield1',
                        label: 'State',
                        value: 'FL',
                        displayField: 'name',
                        store: 'StateStore',
                        valueField: 'abbreviation'
                    }
                ]
            },
            {
                xtype: 'panel',
                flex: 9,
                layout: 'fit',
                items: [
                    {
                        xtype: 'list',
                        itemId: 'mylist2',
                        itemTpl: [
                            '<div>{LocalityName}</div>'
                        ],
                        store: 'FMRStore'
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onMyselectfield1Change',
                event: 'change',
                delegate: '#myselectfield1'
            },
            {
                fn: 'onMylist2ItemTap',
                event: 'itemtap',
                delegate: '#mylist2'
            },
            {
                fn: 'onFmrsShow',
                event: 'show',
                delegate: '#fmrs-view'
            },
            {
                fn: 'onFmrsActivate',
                event: 'activate'
            }
        ]
    },

    onMyselectfield1Change: function(selectfield, newValue, oldValue, eOpts) {
        var store = Ext.getStore('FMRStore'),
            view = Ext.getCmp('fmrs'),
            list = view.down('list');

        list.setStore(null);

        store.clearFilter();
        // Clear current filter if less than 2
        if (newValue !== 'All') {
            store.filter('state',newValue);
        }

        store.load({
            callback: function(){
                list.setStore(store)
            }
        });
    },

    onMylist2ItemTap: function(dataview, index, target, record, e, eOpts) {
        var form = Ext.getCmp('fmr-form');

        if (form === undefined){
            form = Ext.create('HUDTenant.view.FMRForm');
        }

        form.setRecord(record);
        Ext.Viewport.setActiveItem(form);
    },

    onFmrsShow: function(component, eOpts) {
        if (Ext.getCmp('main-view') === undefined){
            this.down('titlebar').hide();
        }
    },

    onFmrsActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        if (Ext.getCmp('main-view') === undefined){
            this.down('titlebar').hide();
        }
    }


});