/*
 * File: app/controller/Pha.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('HUDTenant.controller.Pha', {
    extend: 'Ext.app.Controller',

    config: {
        models: [
            'Pha'
        ],
        stores: [
            'PhaStore',
            'StateStore'
        ],
        views: [
            'PhasView'
        ],

        control: {
            "phasview #searchField": {
                keyup: 'search'
            },
            "searchfield": {
                clearicontap: 'clearSearch'
            },
            "phasview #stateField": {
                change: 'filterByState'
            }
        }
    },

    search: function(textfield, e, eOpts) {
        this.clearFilterFlags();
        this.filterBySearchValue(textfield.getValue());
    },

    clearSearch: function(textfield, e, eOpts) {

        // Get store
        var store = Ext.getStore('PhaStore');

        // Clear filter
        store.clearFilter();
        store.load();

    },

    filterByState: function(selectfield, newValue, oldValue, eOpts) {
        var view = Ext.getCmp('phasview'),
            list = view.down('list');


        list.setGrouped(false);

        this.clearFilterFlags();

        this.filterByStateValue(newValue);
    },

    filterBySearchValue: function(value) {
        var me = this,
            store = Ext.getStore('PhaStore'),	// Pha store
            view = Ext.getCmp('phasview'),
            list = view.down('list'),
            stateField = view.down('selectfield'),
            state = stateField.getValue(),
            restoreGroup = function(){
                me.restoreGroup(list, store);
            };


        if (store.filteredBySearch === undefined){
            list.setGrouped(false);

            // Clear current filter if less than 2
            if (value.length === 0) {
                if (store.filteredByState === undefined){
                    store.clearFilter();
                    this.filterByStateValue(state,restoreGroup);
                }

            }

            // Search term must be at least 2 characters
            if (value.length < 2) {
                Ext.Viewport.setMasked(false);
                return;
            }

            this.Mask('searching');


            list.setStore(null);
            // Clear any current filters
            if (store.filteredByState === undefined){
                store.clearFilter();
            }
            // Check if a value is provided
            if (value) {

                // Spit value to get multiple terms
                var terms = value.split(' ');

                // Convert each search string into regex
                var regexps = [];
                Ext.each(terms, function(term) {

                    // Ensure term is not space and at least 2 characters
                    if (term && term.length > 1) {
                        regexps.push(new RegExp(term, 'i')); // Case-insensitive regex
                    }

                });

                // Filter records
                store.filter(function(record) {

                    var matches = [];

                    // Check each of the regular expressions
                    Ext.each(regexps, function(regex) {

                        var match;
                        if (state === "All"){
                            match = record.get('name').match(regex);
                        }
                        else{
                            match = record.get('name').match(regex) && (record.get('state') === state);
                        }
                        matches.push(match);

                    });

                    // If nothing was found, return false to not show
                    if (regexps.length > 1 && matches.indexOf(false) != -1) {
                        return false;
                    } else {
                        // Else return to show
                        return matches[0];
                    }

                });
                store.filteredBySearch = true;
                this.filterByStateValue(state,restoreGroup);

            }
            else{
                store.filteredBySearch = true;
                this.filterByStateValue(state,restoreGroup);

            }
        }
        else{
            restoreGroup();
        }

    },

    filterByStateValue: function(value, callback) {
        var me = this,
            store = Ext.getStore('PhaStore'),
            cb = callback || function(){
              var view = Ext.getCmp('phasview'),
                  field = view.down('searchfield'),
                  searchValue = field.getValue();
                me.filterBySearchValue(searchValue);

            };

        if (store.filteredByState === undefined){
            this.Mask('Filtering by ' + value);

            if (value === 'All'){
                if (store.filteredBySearch === undefined){
                    store.clearFilter();
                }

            }
            else{
                store.filter('state',value);
            }
            store.filteredByState = true;
            store.load({
                callback: cb
            });
        }
        else{
            cb();
        }

    },

    clearFilterFlags: function() {
        var store = Ext.getStore('PhaStore');

        store.filteredByState = undefined;
        store.filteredBySearch = undefined;
    },

    Mask: function(msg) {
        Ext.Viewport.setMasked({
            xtype: 'loadmask',
            message: msg
        });
    },

    restoreGroup: function(list, store) {
        list.setStore(store);

        Ext.Viewport.setMasked(false);
    }

});